apiVersion: v1
kind: ServiceAccount
metadata:
  name: {{gitops.app}}
  namespace: {{gitops.namespace}}

---

apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: {{gitops.app}}
rules:
- apiGroups: [""]
  resources:
  - nodes
  - nodes/proxy
  - services
  - endpoints
  - pods
  verbs: ["get", "list", "watch"]
- apiGroups:
  - extensions
  resources:
  - ingresses
  verbs: ["get", "list", "watch"]
- nonResourceURLs: ["/metrics"]
  verbs: ["get"]

---

apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: {{gitops.app}}
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: {{gitops.app}}
subjects:
- kind: ServiceAccount
  name: {{gitops.app}}
  namespace: {{gitops.namespace}}

---

apiVersion: v1
kind: ConfigMap
metadata:
  name: {{gitops.app}}-server-conf
  labels:
    name: {{gitops.app}}-server-conf
  namespace: {{gitops.namespace}}
data:
  prometheus.yml: |-
    global:
      scrape_interval: 5s
      evaluation_interval: 5s
      external_labels:
        origin_prometheus: {{gitops.cluster.name}}
    remote_write:
    - url: {{gitops.prometheusURL}}
      basic_auth:
        username: {{gitops.prometheusUser}}
        password_file: /etc/prometheus/secrets/prometheus.key
    scrape_configs:
      - job_name: 'webv-heartbeat'
        static_configs:
          - targets: [ 'webv-heartbeat.monitoring.svc.cluster.local:8080' ]
        metric_relabel_configs:
        - source_labels: [ __name__ ]
          regex: "WebVDuration_count|WebVSummary|WebVSummary_count"
          action: keep
      - job_name: 'webv-imdb'
        static_configs:
          - targets: [ 'webv-imdb.monitoring.svc.cluster.local:8080' ]
        metric_relabel_configs:
        - source_labels: [ __name__ ]
          regex: "WebVDuration_count|WebVSummary|WebVSummary_count"
          action: keep
---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{gitops.app}}-deployment
  namespace: {{gitops.namespace}}
  labels:
    app: {{gitops.app}}-server
spec:
  replicas: 1
  selector:
    matchLabels:
      app: {{gitops.app}}-server
  template:
    metadata:
      labels:
        app: {{gitops.app}}-server
    spec:
      containers:
        - name: {{gitops.app}}
          image: {{gitops.image}}
          args:
            - "--storage.tsdb.retention.time=12h"
            - "--config.file=/etc/prometheus/prometheus.yml"
            - "--storage.tsdb.path=/prometheus/"
          ports:
            - containerPort: 9090
          resources:
            requests:
              cpu: 250m
              memory: 250M
            limits:
              cpu: 500M
              memory: 500M
          volumeMounts:
            - name: prometheus-config-volume
              mountPath: /etc/prometheus/
            - name: prometheus-storage-volume
              mountPath: /prometheus/
            - name: prometheus-secret-volume
              mountPath: /etc/prometheus/secrets
      volumes:
        - name: prometheus-config-volume
          configMap:
            defaultMode: 420
            name: prometheus-server-conf

        - name: prometheus-secret-volume
          secret:
            secretName: prom-secrets

        - name: prometheus-storage-volume
          emptyDir: {}

---

apiVersion: v1
kind: Service
metadata:
  name: {{gitops.app}}-service
  namespace: {{gitops.namespace}}
  annotations:
      prometheus.io/scrape: 'true'
      prometheus.io/port:   '9090'
spec:
  selector:
    app: {{gitops.app}}-server
  ports:
    - port: 8080
      targetPort: 9090
